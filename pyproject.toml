[build-system]
requires = ["uv_build>=0.8.2,<0.9.0"]
build-backend = "uv_build"

[project]
name = "git-twig"
version = "0.5.0"
description = "git worktree how it should be..."
authors = [
    {name = "Philipp KrÃ¼ger", email = "github.khab3@passinbox.com"},
]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "click<9.0.0,>=8.1.7",
    "loguru>=0.7.2",
    "shellingham>=1.5.4",
    "psutil>=5.9.8",
    "importlib-resources>=6.4.0",
    "pydantic>=2.11.7",
]

[project.scripts]
git-twig = "git_twig.__main__:main"

[dependency-groups]
dev = [
    "ruff>=0.4.1",
    "pre-commit>=3.7.0",
    "mypy>=1.10.0",
    "types-psutil>=5.9.5.20240516",
    "git-changelog>=2.5.2",
    "commitizen>=3.27.0",
]
docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.25",
    "mkdocs-click>=0.8.1",
    "mike>=2.1.1",
    "markdown-callouts>=0.4.0",
    "mkdocs-same-dir>=0.1.3",
]

[tool.git-changelog]
convention = "conventional"
provider = "github"
output = "CHANGELOG.md"

[tool.commitizen]
version_provider="pep621"
update_changelog_on_bump=false

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
# enable all linter rules
select = ["ALL"]
ignore = [
    "D104",     # missing docstring in public package
    "D203",     # no blank line before class docstring
    "D212",     # multi line summary on the first line of a docstring
    "G004",     # f-string in logging
    # TODO:
    "PLC0415",
    "FBT001",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402",  # unused imports
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "shellingham.*"
follow_untyped_imports = true

[tool.poe]
executor.type = "uv"

[tool.poe.tasks]
_version = "uv version --short"

[tool.poe.tasks._move_tag]
cmd = "git tag -f ${VERSION}"
uses = { VERSION = "_version" }

[tool.poe.tasks.install]
help = "Create a virtual environment and install the pre-commit hooks."
cmd = "pre-commit install --install-hooks"

[tool.poe.tasks.format]
help = "Format Python files"
sequence = [
    { cmd = "ruff format src" },
    { cmd = "ruff check src --select I --fix" },
]

[tool.poe.tasks.lint]
help = "Static code analysis"
ignore_fail = "return_non_zero"
sequence = [
    { cmd = "ruff check src" },
    { cmd = "ruff format src --check" },
    { cmd = "mypy src" },
]

[tool.poe.tasks.bump]
help = "Bump version"
sequence = [
    { cmd = "cz bump" },
    { cmd = "git-changelog" },
    { cmd = "uv lock"},
    { cmd = "git commit --amend --no-edit uv.lock CHANGELOG.md" },
    { ref = "_move_tag" }
]

[tool.poe.tasks.docs]
help = "Run mkdocs live preview server."
sequence = [
    { cmd = "uv sync --group docs"},
    { cmd = "mkdocs serve --open" },
]
