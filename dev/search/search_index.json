{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyGWT - Python Git Worktree","text":"<p>A CLI tool that's suppose to ease the <code>git worktree</code> workflow.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>I just recently learned about <code>git worktree</code> and found it very intresting. While searching the internet I found two ways to work with it:</p> <ol> <li>Use a bare clone and create directories for the different worktrees within that clone.</li> <li>Use a regular clone and create temp directories for the different worktrees.</li> </ol> <p>I tried both options and both of them either felt wrong or had some major flaws e.g: With a regular bare clone my Git status shell integration wasn't able to detect changes, because a bare clone does not hold any information about the remote branches. (At least that's what I figured out, with my limited knowledge)</p> <p>After a lot of trial and error I figured out a way to configure a bare clone to work exactly how I wanted it. But to get there I'd had to run 4 commands only to get an empty clone. The command for creating worktree checkout with automated remote tracking was also very cumbersome.</p> <p>That's when I decided that I want a script or tool that hides this complexity. I found Linux shell scripts<sup>1</sup> that did some of the heavy lifting. But since I work on Windows and Linux I needed something that works on both platforms. Hence I decided to create my own tool, in a scripting language that is available on all platforms.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python &gt;= 3.10</li> <li>optional: pipx</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pipx install git+https://github.com/Bubichoo-Teitichoo/pygwt\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>see CLI reference</p>"},{"location":"#roadmap-v100","title":"Roadmap - v1.0.0","text":"<ul> <li> <code>switch</code> command that changes worktrees in the current shell<ul> <li> for Windows Powershell</li> <li> for Bash</li> <li> for Zsh</li> </ul> </li> <li> <code>list</code> command</li> <li> replace Git CLI calls with libgit2</li> <li> autocompletion of branch names...<ul> <li> for Windows Powershell</li> <li> for Bash</li> <li> for Zsh</li> </ul> </li> <li>Improve <code>pygwt switch</code><ul> <li> Emulate <code>git switch -</code> behavior</li> <li> Allow switching between different repositories</li> </ul> </li> <li> TBC...</li> </ul> <ol> <li> <p>https://github.com/yankeexe/git-worktree-switcher \u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Compare with latest</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add commands for quick switching between repositories (2e7e0e5 by Philipp Kr\u00fcger).</li> <li>Enable back and forth switching (686bc7e by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Remove '.git' suffix from destination (e5dad4d by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Remove redundant pygit2 imports (451231d by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#040-2024-06-07","title":"0.4.0 - 2024-06-07","text":"<p>Compare with 0.3.1</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add 'switch' hook for bash (4212f56 by Philipp Kr\u00fcger).</li> <li>Add 'switch' hook for zsh (5b1327a by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Shorten 'remove' and 'list' command (254ed0e by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#031-2024-06-06","title":"0.3.1 - 2024-06-06","text":"<p>Compare with 0.3.0</p>"},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Use incomplete in completions (561eb06 by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#030-2024-06-05","title":"0.3.0 - 2024-06-05","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Improve completion for start points (b99cfd8 by Philipp Kr\u00fcger).</li> <li>Add 'switch' command and powershell proxy (a5c00b1 by Philipp Kr\u00fcger).</li> <li>Add 'remove' command (4bb4de9 by Philipp Kr\u00fcger).</li> <li>Add completion function for worktree names (9d6135c by Philipp Kr\u00fcger).</li> <li>Add powershell completions (853ac42 by Philipp Kr\u00fcger).</li> <li>Add start point argument to get_branch function (be2c4a9 by Philipp Kr\u00fcger).</li> <li>Add bash shell completions (9ce79a9 by Philipp Kr\u00fcger).</li> <li>Add ZSH completions (1ccabbc by Philipp Kr\u00fcger).</li> <li>Enable switch for root worktree if non-bare (feaadfb by Philipp Kr\u00fcger).</li> <li>Add as_worktree function to Repository (d141b37 by Philipp Kr\u00fcger).</li> <li>List non-bare repository root (2f37cea by Philipp Kr\u00fcger).</li> <li>Add open_worktree function (b48b166 by Philipp Kr\u00fcger).</li> <li>Add support for Path objects to Repository constructor (0b817ae by Philipp Kr\u00fcger).</li> <li>Log when creating a new worktree (a3f539f by Philipp Kr\u00fcger).</li> <li>Always create worktree directories in repository root (dc291bc by Philipp Kr\u00fcger).</li> <li>Add short version for shell options, rename checkout to create (d84fb39 by Philipp Kr\u00fcger).</li> <li>Use high-level abstraction functions for branch creation (61d3bc7 by Philipp Kr\u00fcger).</li> <li>Add high-level functions for worktree operations (0e687e4 by Philipp Kr\u00fcger).</li> <li>Add high-level get_branch function (c575ab7 by Philipp Kr\u00fcger).</li> <li>Add high-level abstraction for branch creation (d2db15f by Philipp Kr\u00fcger).</li> <li>Add support for Windows shells (3bee3f3 by Philipp Kr\u00fcger).</li> <li>Implement PoC for switch command (047ac13 by Philipp Kr\u00fcger).</li> <li>Reduce noise in log output (edb9814 by Philipp Kr\u00fcger).</li> <li>Add command to install a git alias (9a47311 by Philipp Kr\u00fcger).</li> <li>First draft (9d68ebb by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Add powershell completer for pygwt.exe (db46972 by Philipp Kr\u00fcger).</li> <li>Only copy completion scripts (66aa69d by Philipp Kr\u00fcger).</li> <li>Use importlib_resources for backward compatibility (5fcae6b by Philipp Kr\u00fcger).</li> <li>Only remove GIT_DIR it it exists (1c01fb9 by Philipp Kr\u00fcger).</li> <li>Remove GIT_DIR entirely (812cca5 by Philipp Kr\u00fcger).</li> <li>Use remote HEAD if local does not exists (b88aa54 by Philipp Kr\u00fcger).</li> <li>Remove GIT_DIR variable before spawning shell (d2ab2a3 by Philipp Kr\u00fcger).</li> <li>Start right shell on Windows if command is executed as Git Alias (41ddaf1 by Philipp Kr\u00fcger).</li> <li>Use list_worktree_ex for list command (2be4cb8 by Philipp Kr\u00fcger).</li> <li>Use branch name lookup instead of low level worktree lookup (9370826 by Philipp Kr\u00fcger).</li> <li>Ignore return code of spawned shells (4f9a52b by Philipp Kr\u00fcger).</li> <li>Hash branch name to get unique worktree name (223f4bc by Philipp Kr\u00fcger).</li> <li>Handle error if one of the clone commands fail (3c37682 by Philipp Kr\u00fcger).</li> <li>Check if destination exists when cloning (9af1def by Philipp Kr\u00fcger).</li> </ul>"},{"location":"changelog/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Use git CLI to list worktrees (8832309 by Philipp Kr\u00fcger).</li> <li>Use git API to clone repositories (dce29ac by Philipp Kr\u00fcger).</li> <li>Use git API to install alias (f1fe743 by Philipp Kr\u00fcger).</li> <li>Remove excessive part from alias (511c285 by Philipp Kr\u00fcger).</li> <li>Use Git API for 'add' command (55d3a2a by Philipp Kr\u00fcger).</li> <li>Move creation of worktree under Repository class (f12831c by Philipp Kr\u00fcger).</li> <li>Use open_worktree to detect prunable worktrees (2d5fe83 by Philipp Kr\u00fcger).</li> <li>Move pygit abstraction layer into separate module (cb5cd98 by Philipp Kr\u00fcger).</li> <li>Move code for root dir detection under Repository class (a871bfe by Philipp Kr\u00fcger).</li> <li>Move Shell spwan code under Shell class (aba6f4d by Philipp Kr\u00fcger).</li> <li>Handle all cases with create_branch_ex (d30d2a1 by Philipp Kr\u00fcger).</li> <li>Move typevar definition above function that uses it (3ad00d2 by Philipp Kr\u00fcger).</li> <li>Use bitmaks to configure pushd (6e850ce by Philipp Kr\u00fcger).</li> </ul>"},{"location":"cli/","title":"CLI Reference","text":""},{"location":"cli/#pygwt","title":"pygwt","text":"<p>A CLI tool to simplify the git worktree workflow.</p> <p>Usage:</p> <pre><code>pygwt [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-l</code>, <code>--log</code> choice (<code>trace</code> | <code>debug</code> | <code>info</code> | <code>success</code> | <code>warning</code> | <code>error</code> | <code>critical</code>) The minimum log severity level. <code>info</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>add: Add a new worktree.</li> <li>clone: Clone a repository and set it up for a <code>git worktree</code> based workflow.</li> <li>init: Initialize your shell for pygwt and completions.</li> <li>list: List all worktrees.</li> <li>remove: Remove a worktree.</li> <li>repository: Repository related commands.</li> <li>shell: Spawn a new shell within the selected worktree.</li> <li>switch: Switch to a different worktree.</li> <li>uninit: Reverse the initialize script.</li> </ul>"},{"location":"cli/#pygwt-add","title":"pygwt add","text":"<p>Add a new worktree.</p> <p>Adds a new worktree for the given [BRANCH] at the defined destination. If [BRANCH] already exists on the remote, the worktree will track the remote branch.</p> <p>If [BRANCH] does not exists the new branch will be based on the current <code>HEAD</code>. When [START-POINT] is given the newly created branch is based on [START-POINT] instead.</p> <p>Usage:</p> <pre><code>pygwt add [OPTIONS] BRANCH [START_POINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--dest</code> text Destination path for the new worktree directory. If omitted the the destination is inferred from the repository root + branch name. <code>&lt;function &lt;lambda&gt; at 0x7fe831155cf0&gt;</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-clone","title":"pygwt clone","text":"<p>Clone a repository and set it up for a <code>git worktree</code> based workflow.</p> <p>The repository will be cloned as a bare repository, which means only the files that usually reside in the .git subdirectory are created.</p> <p>Those files are created in a .git directory, similar to the regular clone behavior. But since the repository is cloned in bare mode no other files will be created.</p> <p>Usage:</p> <pre><code>pygwt clone [OPTIONS] URL [DEST]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-init","title":"pygwt init","text":"<p>Initialize your shell for pygwt and completions.</p> <p>Usage:</p> <pre><code>pygwt init [OPTIONS] [[pwsh|powershell|bash|zsh]]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-list","title":"pygwt list","text":"<p>List all worktrees.</p> <p>This is just an alias for for <code>git worktree list</code>.</p> <p>Usage:</p> <pre><code>pygwt list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-remove","title":"pygwt remove","text":"<p>Remove a worktree.</p> <p>This is just an 'alias' for <code>git worktree remove</code> that's suppose to save you some typing.</p> <p>Usage:</p> <pre><code>pygwt remove [OPTIONS] NAME [ADDITIONAL_ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-repository","title":"pygwt repository","text":"<p>Repository related commands.</p> <p>Usage:</p> <pre><code>pygwt repository [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>list: List all registred repositories.</li> <li>register: Add a repository to the registry of switchable repositories.</li> <li>switch: Switch to a different repository.</li> </ul>"},{"location":"cli/#pygwt-repository-list","title":"pygwt repository list","text":"<p>List all registred repositories.</p> <p>Usage:</p> <pre><code>pygwt repository list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-repository-register","title":"pygwt repository register","text":"<p>Add a repository to the registry of switchable repositories.</p> <p>Usage:</p> <pre><code>pygwt repository register [OPTIONS] [PATH]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-repository-switch","title":"pygwt repository switch","text":"<p>Switch to a different repository.</p> <p>Usage:</p> <pre><code>pygwt repository switch [OPTIONS] PATH\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-shell","title":"pygwt shell","text":"<p>Spawn a new shell within the selected worktree.</p> <p>Warning</p> <p>This command spawns a new shell, which may result in some unexpected side-effects. Consider using <code>pygwt switch</code> instead.</p> <p>Detect the current shell, the command is executed in and spawn a new instance within the directory of the worktree defined by [NAME].</p> <p>If the branch, defined by [NAME], does not exist and the create flag is set, a new branch will be created. If [START_POINT] is omitted the current HEAD will be used as a start point.</p> <p>Usage:</p> <pre><code>pygwt shell [OPTIONS] NAME [START_POINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-c</code>, <code>--create</code> boolean Create the worktree if it does not yet exists. <code>False</code> <code>-d</code>, <code>--delete</code> boolean Delete the checkout after exiting the shell. <code>False</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-switch","title":"pygwt switch","text":"<p>Switch to a different worktree.</p> <p>Note</p> <p>This requires the Shell hooks included in the completion scripts. Otherwise it will just print the worktree path</p> <p>Under the hood worktrees are given an abstract name. With this command [NAME] is the branch name the worktree represents.</p> <p>This command works similar to <code>git switch</code> for branches. If a worktree does not exist the 'create'-flag is required to create a new one.</p> <p>The create flag will also create a new branch, if no branch for the given name could be found. If [START-POINT] is omitted, the current HEAD is used.</p> <p>If name is <code>-</code> you will switch to the previous directory.</p> <p>Usage:</p> <pre><code>pygwt switch [OPTIONS] NAME [START_POINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-c</code>, <code>--create</code> boolean Create the worktree if it does not yet exists. <code>False</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-uninit","title":"pygwt uninit","text":"<p>Reverse the initialize script.</p> <p>Usage:</p> <pre><code>pygwt uninit [OPTIONS] [[pwsh|powershell|bash|zsh]]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"}]}