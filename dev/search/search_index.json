{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"git-twig - <code>git worktree</code> as it should be.","text":"<p>Working with <code>git worktree</code> can be a bit finicky at time. <code>git-twig</code> aims to make worktrees a first class citizens, similar to branches.</p> <p>Using it's shell integration, <code>git-twig</code> makes switching between worktrees as easy as <code>git twig switch ...</code>.</p> <p></p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python &gt;= 3.10</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code># installation with pipx\npipx install git+https://github.com/Bubichoo-Teitichoo/git-twig\n# installation with uv\nuv tool install git+https://github.com/Bubichoo-Teitichoo/git-twig\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>see CLI reference</p>"},{"location":"#shell-completionintegration","title":"Shell Completion/Integration","text":"<p>git-twig has supports for the following shells:</p> <ul> <li>powershell/pwsh</li> <li>zsh</li> <li>bash</li> </ul> <p>Note</p> <p>The <code>git-twig init</code> command is able to detect your current shell. If this detection, for whatever reason, is not working, add the name of your shell as and additional argument e.g. <code>git-twig zsh</code>.</p>"},{"location":"#zsh","title":"zsh","text":"<p>To add shell completion and integration to zsh, add the following line to you .zshrc.</p> <pre><code>eval \"$(git-twig init)\"\n</code></pre>"},{"location":"#bash","title":"bash","text":"<p>To add shell completion and integration to bash, add the following line to you .bashrc.</p> <pre><code>eval \"$(git-twig init)\"\n</code></pre>"},{"location":"#powershell","title":"powershell","text":"<p>To add shell completion and integration to powershell, add the following line to you <code>$PROFILE</code>.</p> <pre><code>git-twig init | Invoke-Expression\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"Unreleased","text":"<p>Compare with latest</p>"},{"location":"CHANGELOG/#features","title":"Features","text":"<ul> <li>Add commands for quick switching between repositories (2e7e0e5 by Philipp Kr\u00fcger).</li> <li>Enable back and forth switching (686bc7e by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Add repository root not '.git' directory to registroy when using 'git wt clone' (a7549d2 by Philipp Kr\u00fcger).</li> <li>Use worktree paths instead of branch names for 'git wt remove' completions (630257c by Philipp Kr\u00fcger).</li> <li>Use custom completion for 'git-wt add' (925aa9f by Philipp Kr\u00fcger).</li> <li>Properly create new branches (9c440b0 by Philipp Kr\u00fcger).</li> <li>Redirect stdout of git cli invocations to stderr (1db9ce8 by Philipp Kr\u00fcger).</li> <li>Only run cd command if git-wt didn't fail (04aaec6 by Philipp Kr\u00fcger).</li> <li>Remove debug output from zsh completion script (72f40c2 by Philipp Kr\u00fcger).</li> <li>Re-add _git-wt method to zsh init script (8bbf9c6 by Philipp Kr\u00fcger).</li> <li>Remove '.git' suffix from destination (e5dad4d by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#code-refactoring","title":"Code Refactoring","text":"<ul> <li>Delete empty parent directories when removing a worktree (b0c04ca by Philipp Kr\u00fcger).</li> <li>Improve printed worktree list (0e4f4a9 by Philipp Kr\u00fcger).</li> <li>Reduce complexity by removing pygit2 (ec97d02 by Philipp Kr\u00fcger).</li> <li>Use contextlib to make pushd much more lightweight (c455b36 by Philipp Kr\u00fcger).</li> <li>Use git CLI when creating new worktrees (e5cdfa8 by Philipp Kr\u00fcger).</li> <li>Use <code>git.execute</code> when removing worktrees (475275f by Philipp Kr\u00fcger).</li> <li>Use git.execute function instead of subprocess (b37c445 by Philipp Kr\u00fcger).</li> <li>Use git CLI when creating a worktree (e885eaf by Philipp Kr\u00fcger).</li> <li>Use git CLI when cloning a repository (5c5433c by Philipp Kr\u00fcger).</li> <li>Add execute methode to git module (6632345 by Philipp Kr\u00fcger).</li> <li>Fix linter findings (61a145b by Philipp Kr\u00fcger).</li> <li>Replace install commands with init commands (95e58f5 by Philipp Kr\u00fcger).</li> <li>Move commands and utility functions into own modules (1dfcb4d by Philipp Kr\u00fcger).</li> <li>Remove redundant pygit2 imports (451231d by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#040-2024-06-07","title":"0.4.0 - 2024-06-07","text":"<p>Compare with 0.3.1</p>"},{"location":"CHANGELOG/#features_1","title":"Features","text":"<ul> <li>Add 'switch' hook for bash (4212f56 by Philipp Kr\u00fcger).</li> <li>Add 'switch' hook for zsh (5b1327a by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_1","title":"Code Refactoring","text":"<ul> <li>Shorten 'remove' and 'list' command (254ed0e by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#031-2024-06-06","title":"0.3.1 - 2024-06-06","text":"<p>Compare with 0.3.0</p>"},{"location":"CHANGELOG/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Use incomplete in completions (561eb06 by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#030-2024-06-05","title":"0.3.0 - 2024-06-05","text":"<p>Compare with first commit</p>"},{"location":"CHANGELOG/#features_2","title":"Features","text":"<ul> <li>Improve completion for start points (b99cfd8 by Philipp Kr\u00fcger).</li> <li>Add 'switch' command and powershell proxy (a5c00b1 by Philipp Kr\u00fcger).</li> <li>Add 'remove' command (4bb4de9 by Philipp Kr\u00fcger).</li> <li>Add completion function for worktree names (9d6135c by Philipp Kr\u00fcger).</li> <li>Add powershell completions (853ac42 by Philipp Kr\u00fcger).</li> <li>Add start point argument to get_branch function (be2c4a9 by Philipp Kr\u00fcger).</li> <li>Add bash shell completions (9ce79a9 by Philipp Kr\u00fcger).</li> <li>Add ZSH completions (1ccabbc by Philipp Kr\u00fcger).</li> <li>Enable switch for root worktree if non-bare (feaadfb by Philipp Kr\u00fcger).</li> <li>Add as_worktree function to Repository (d141b37 by Philipp Kr\u00fcger).</li> <li>List non-bare repository root (2f37cea by Philipp Kr\u00fcger).</li> <li>Add open_worktree function (b48b166 by Philipp Kr\u00fcger).</li> <li>Add support for Path objects to Repository constructor (0b817ae by Philipp Kr\u00fcger).</li> <li>Log when creating a new worktree (a3f539f by Philipp Kr\u00fcger).</li> <li>Always create worktree directories in repository root (dc291bc by Philipp Kr\u00fcger).</li> <li>Add short version for shell options, rename checkout to create (d84fb39 by Philipp Kr\u00fcger).</li> <li>Use high-level abstraction functions for branch creation (61d3bc7 by Philipp Kr\u00fcger).</li> <li>Add high-level functions for worktree operations (0e687e4 by Philipp Kr\u00fcger).</li> <li>Add high-level get_branch function (c575ab7 by Philipp Kr\u00fcger).</li> <li>Add high-level abstraction for branch creation (d2db15f by Philipp Kr\u00fcger).</li> <li>Add support for Windows shells (3bee3f3 by Philipp Kr\u00fcger).</li> <li>Implement PoC for switch command (047ac13 by Philipp Kr\u00fcger).</li> <li>Reduce noise in log output (edb9814 by Philipp Kr\u00fcger).</li> <li>Add command to install a git alias (9a47311 by Philipp Kr\u00fcger).</li> <li>First draft (9d68ebb by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Add powershell completer for pygwt.exe (db46972 by Philipp Kr\u00fcger).</li> <li>Only copy completion scripts (66aa69d by Philipp Kr\u00fcger).</li> <li>Use importlib_resources for backward compatibility (5fcae6b by Philipp Kr\u00fcger).</li> <li>Only remove GIT_DIR it it exists (1c01fb9 by Philipp Kr\u00fcger).</li> <li>Remove GIT_DIR entirely (812cca5 by Philipp Kr\u00fcger).</li> <li>Use remote HEAD if local does not exists (b88aa54 by Philipp Kr\u00fcger).</li> <li>Remove GIT_DIR variable before spawning shell (d2ab2a3 by Philipp Kr\u00fcger).</li> <li>Start right shell on Windows if command is executed as Git Alias (41ddaf1 by Philipp Kr\u00fcger).</li> <li>Use list_worktree_ex for list command (2be4cb8 by Philipp Kr\u00fcger).</li> <li>Use branch name lookup instead of low level worktree lookup (9370826 by Philipp Kr\u00fcger).</li> <li>Ignore return code of spawned shells (4f9a52b by Philipp Kr\u00fcger).</li> <li>Hash branch name to get unique worktree name (223f4bc by Philipp Kr\u00fcger).</li> <li>Handle error if one of the clone commands fail (3c37682 by Philipp Kr\u00fcger).</li> <li>Check if destination exists when cloning (9af1def by Philipp Kr\u00fcger).</li> </ul>"},{"location":"CHANGELOG/#code-refactoring_2","title":"Code Refactoring","text":"<ul> <li>Use git CLI to list worktrees (8832309 by Philipp Kr\u00fcger).</li> <li>Use git API to clone repositories (dce29ac by Philipp Kr\u00fcger).</li> <li>Use git API to install alias (f1fe743 by Philipp Kr\u00fcger).</li> <li>Remove excessive part from alias (511c285 by Philipp Kr\u00fcger).</li> <li>Use Git API for 'add' command (55d3a2a by Philipp Kr\u00fcger).</li> <li>Move creation of worktree under Repository class (f12831c by Philipp Kr\u00fcger).</li> <li>Use open_worktree to detect prunable worktrees (2d5fe83 by Philipp Kr\u00fcger).</li> <li>Move pygit abstraction layer into separate module (cb5cd98 by Philipp Kr\u00fcger).</li> <li>Move code for root dir detection under Repository class (a871bfe by Philipp Kr\u00fcger).</li> <li>Move Shell spwan code under Shell class (aba6f4d by Philipp Kr\u00fcger).</li> <li>Handle all cases with create_branch_ex (d30d2a1 by Philipp Kr\u00fcger).</li> <li>Move typevar definition above function that uses it (3ad00d2 by Philipp Kr\u00fcger).</li> <li>Use bitmaks to configure pushd (6e850ce by Philipp Kr\u00fcger).</li> </ul>"},{"location":"docs/cli/","title":"CLI Reference","text":""},{"location":"docs/cli/#git-twig","title":"git twig","text":"<p>'git worktree' as it should be...</p> <p>Working with git worktree can be a bit finicky at time. git-twig aims to make worktrees a first class citizens, similar to branches.</p> <p>Using it's shell integration, git-twig makes switching between worktrees as easy as git twig switch...</p> <p>Usage:</p> <pre><code>git twig [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  -l, --log [trace|debug|info|success|warning|error|critical]\n                                  The minimum log severity level.\n  --version                       Show the version and exit.\n  -h, --help                      Show this message and exit.\n</code></pre> <p>Subcommands</p> <ul> <li>add: Create a new worktree.</li> <li>clone: Clone a repository and set it up for a <code>git twig</code> based workflow.</li> <li>init: Initialize your shell for git-twig and completions.</li> <li>list: List all worktrees.</li> <li>remove: Remove a worktree.</li> <li>repository: List, switch and register repositories.</li> <li>shell: Spawn a new shell within the selected worktree.</li> <li>switch: Switch to a different worktree.</li> </ul>"},{"location":"docs/cli/#git-twig-add","title":"git twig add","text":"<p>Create a new worktree.</p> <p>Create a new worktree for the given [BRANCH] at the given [DEST].</p> <p>If no local branch with the given name exists, a new one will be created.</p> <p>If one of the remote branches matches the given branch name, the newly created branch will track that remote branch.</p> <p>If no remote branch exists, the newly created branch will be forked off of [START POINT]. If [START POINT] is omitted, <code>HEAD</code> will be used instead.</p> <p>Usage:</p> <pre><code>git twig add [OPTIONS] BRANCH [START_POINT]\n</code></pre> <p>Options:</p> <pre><code>  --dest PATH  Destination path for the new worktree directory. If omitted the\n               the destination is inferred from the repository root + branch\n               name.\n  --version    Show the version and exit.\n  -h, --help   Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-clone","title":"git twig clone","text":"<p>Clone a repository and set it up for a <code>git twig</code> based workflow.</p> <p>The repository will be cloned as a bare repository, which means only the files that usually reside in the .git subdirectory are created.</p> <p>Those files are created in a .git directory, similar to the regular clone behavior. But since the repository is cloned in bare mode no other files will be created.</p> <p>Usage:</p> <pre><code>git twig clone [OPTIONS] URL [DEST]\n</code></pre> <p>Options:</p> <pre><code>  --version   Show the version and exit.\n  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-init","title":"git twig init","text":"<p>Initialize your shell for git-twig and completions.</p> <p>Usage:</p> <pre><code>git twig init [OPTIONS] [[pwsh|powershell|bash|zsh]]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-list","title":"git twig list","text":"<p>List all worktrees.</p> <p>Usage:</p> <pre><code>git twig list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --version   Show the version and exit.\n  -h, --help  Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-remove","title":"git twig remove","text":"<p>Remove a worktree.</p> <p>This is just a fancy alias for <code>git worktree remove</code> to complete the 'ecosystem'.</p> <p>Usage:</p> <pre><code>git twig remove [OPTIONS] [WORKTREES]...\n</code></pre> <p>Options:</p> <pre><code>  -f, --force  Force removal even if worktree is dirty or locked\n  --help       Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-repository","title":"git twig repository","text":"<p>List, switch and register repositories.</p> <p>Once registered, git-twig allows you to switch to repositories, making the usual <code>cd ../../other/repository</code> obsolete.</p> <p>Usage:</p> <pre><code>git twig repository [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre> <p>Subcommands</p> <ul> <li>list: List all registred repositories.</li> <li>register: Add a repository to the registry of repositories.</li> <li>switch: Switch to a different repository.</li> </ul>"},{"location":"docs/cli/#git-twig-repository-list","title":"git twig repository list","text":"<p>List all registred repositories.</p> <p>Usage:</p> <pre><code>git twig repository list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-repository-register","title":"git twig repository register","text":"<p>Add a repository to the registry of repositories.</p> <p>Once registered you can use <code>git twig repository switch</code> to switch between registered repositories.</p> <p>If [PATH] is not given the current working directory is used.</p> <p>Usage:</p> <pre><code>git twig repository register [OPTIONS] [PATH]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-repository-switch","title":"git twig repository switch","text":"<p>Switch to a different repository.</p> <p>Important</p> <p>For this to work properly you will need the shell integrations, otherwise this command will just print the directory of the repository to switch to.</p> <p>Switch to the given [REPOSITORY]. The repository has to be registered first, using the <code>git twig repository register</code> command. If [REPOSITORY] is <code>-</code>, you will be returned to the repository you've previously called this command from.</p> <p>To switch to a specific branch/worktree set the [WORKTREE] argument.</p> <p>Usage:</p> <pre><code>git twig repository switch [OPTIONS] REPOSITORY [WORKTREE]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-shell","title":"git twig shell","text":"<p>Spawn a new shell within the selected worktree.</p> <p>Warning</p> <p>This command spawns a new shell, which may result in some unexpected side-effects. Consider using <code>pygwt switch</code> instead.</p> <p>Detect the current shell, the command is executed in and spawn a new instance within the directory of the worktree defined by [NAME].</p> <p>If the branch, defined by [NAME], does not exist and the create flag is set, a new branch will be created. If [START_POINT] is omitted the current HEAD will be used as a start point.</p> <p>Usage:</p> <pre><code>git twig shell [OPTIONS] NAME [START_POINT]\n</code></pre> <p>Options:</p> <pre><code>  -c, --create  Create the worktree if it does not yet exists.\n  -d, --delete  Delete the checkout after exiting the shell.\n  --version     Show the version and exit.\n  -h, --help    Show this message and exit.\n</code></pre>"},{"location":"docs/cli/#git-twig-switch","title":"git twig switch","text":"<p>Switch to a different worktree.</p> <p>Note</p> <p>This requires the Shell hooks included in the init scripts. Otherwise it will just print the worktree path</p> <p>Under the hood worktrees are given an abstract name. With this command [NAME] is the branch name the worktree represents.</p> <p>This command works similar to <code>git switch</code> for branches. If a worktree does not exist the 'create'-flag can be used to create a new one before switching to it.</p> <p>The create flag will also create a new branch, if no branch for the given name could be found. If [START-POINT] is omitted, the current <code>HEAD</code> is used.</p> <p>If [NAME] is <code>-</code> you will switch to the previous worktree.</p> <p>Usage:</p> <pre><code>git twig switch [OPTIONS] NAME [START_POINT]\n</code></pre> <p>Options:</p> <pre><code>  -c, --create  Create new worktree from a local or remote branch.\n  --version     Show the version and exit.\n  -h, --help    Show this message and exit.\n</code></pre>"}]}