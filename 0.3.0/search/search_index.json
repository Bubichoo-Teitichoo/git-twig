{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyGWT - Python Git Worktree","text":"<p>A CLI tool that's suppose to ease the <code>git worktree</code> workflow.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>I just recently learned about <code>git worktree</code> and found it very intresting. While searching the internet I found two ways to work with it:</p> <ol> <li>Use a bare clone and create directories for the different worktrees within that clone.</li> <li>Use a regular clone and create temp directories for the different worktrees.</li> </ol> <p>I tried both options and both of them either felt wrong or had some major flaws e.g: With a regular bare clone my Git status shell integration wasn't able to detect changes, because a bare clone does not hold any information about the remote branches. (At least that's what I figured out, with my limited knowledge)</p> <p>After a lot of trial and error I figured out a way to configure a bare clone to work exactly how I wanted it. But to get there I'd had to run 4 commands only to get an empty clone. The command for creating worktree checkout with automated remote tracking was also very cumbersome.</p> <p>That's when I decided that I want a script or tool that hides this complexity. I found Linux shell scripts<sup>1</sup> that did some of the heavy lifting. But since I work on Windows and Linux I needed something that works on both platforms. Hence I decided to create my own tool, in a scripting language that is available on all platforms.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python &gt;= 3.10</li> <li>optional: pipx</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pipx install git+https://github.com/Bubichoo-Teitichoo/pygwt\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>see CLI reference</p>"},{"location":"#roadmap-v100","title":"Roadmap - v1.0.0","text":"<ul> <li> <code>switch</code> command that changes worktrees in the current shell<ul> <li> for Windows Powershell</li> <li> for Bash</li> <li> for Zsh</li> </ul> </li> <li> <code>list</code> command</li> <li> replace Git CLI calls with libgit2</li> <li> autocompletion of branch names...<ul> <li> for Windows Powershell</li> <li> for Bash</li> <li> for Zsh</li> </ul> </li> <li> TBC...</li> </ul> <ol> <li> <p>https://github.com/yankeexe/git-worktree-switcher \u21a9</p> </li> </ol>"},{"location":"cli/","title":"CLI Reference","text":""},{"location":"cli/#pygwt","title":"pygwt","text":"<p>A CLI tool to simplify the git worktree workflow.</p> <p>Usage:</p> <pre><code>pygwt [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>-l</code>, <code>--log</code> choice (<code>trace</code> | <code>debug</code> | <code>info</code> | <code>success</code> | <code>warning</code> | <code>error</code> | <code>critical</code>) The minimum log severity level. <code>info</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>add: </li> <li>clone: </li> <li>install: Installers...</li> <li>list: List all worktrees.</li> <li>remove: Remove worktree.</li> <li>shell: </li> <li>switch: Switch into the work given worktree.</li> </ul>"},{"location":"cli/#pygwt-add","title":"pygwt add","text":"<p>Add a new worktree.</p> <p>Adds a new worktree for the given [BRANCH] at the defined destination. If [BRANCH] already exists on the remote, the worktree will track the remote branch.</p> <p>If [BRANCH] does not exists the new branch will be based on the current <code>HEAD</code>. When [START-POINT] is given the newly created branch is based on [START-POINT] instead.</p> <p>Usage:</p> <pre><code>pygwt add [OPTIONS] BRANCH [START_POINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <code>--dest</code> text Destination path for the new worktree directory. If omitted the the destination is inferred from the current working directory + branch name. <code>&lt;function &lt;lambda&gt; at 0x00000219B61DF6A0&gt;</code>"},{"location":"cli/#pygwt-clone","title":"pygwt clone","text":"<p>Clone a repository and set it up for a git worktree based workflow.</p> <p>The repository will be cloned as a bare repository, which means only the files that usually reside in the .git subdirectory are created.</p> <p>Those files are created in a .git directory, similar to the regular clone behavior. But since the repository is cloned in bare mode no other files will be created.</p> <p>After cloning the script will switch into the new directory and continues with a few extra configuring steps:</p> <ol> <li>Create an empty bare repository.</li> <li>Configure remote.origin.fetch:     This is important because otherwise we won't get any infos     about the branch state with respect to the remote.</li> <li>Fetch all remotes:     Populates the list of remote branches.</li> <li>Set <code>origin/HEAD</code>, which isn't set by a bare checkout.</li> </ol> <p>All those steps basically create a \"normal\" clone, with the exception of the missing files.</p> <p>Args:     url (ParseResult):         The URL of the repository you'd like to clone.         If dest is omitted,         the script will infer the destination for the clone         from the last part of the given URL.     dest (Path):         Path where the repository shall be cloned into.         This may be a path that only partially exists.         All missing directories will be created         during cloning.</p> <p>Usage:</p> <pre><code>pygwt clone [OPTIONS] URL [DEST]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-install","title":"pygwt install","text":"<p>Installers...</p> <p>Usage:</p> <pre><code>pygwt install [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>alias: Install a Git alias for this application.</li> <li>completions: Install shell completions for the selected shell.</li> </ul>"},{"location":"cli/#pygwt-install-alias","title":"pygwt install alias","text":"<p>Install a Git alias for this application.</p> <p>Usage:</p> <pre><code>pygwt install alias [OPTIONS] [NAME]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--scope</code> choice (<code>local</code> | <code>global</code> | <code>system</code> | <code>worktree</code>) N/A <code>global</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-install-completions","title":"pygwt install completions","text":"<p>Install shell completions for the selected shell.</p> <p>Usage:</p> <pre><code>pygwt install completions [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-list","title":"pygwt list","text":"<p>List all worktrees.</p> <p>Usage:</p> <pre><code>pygwt list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-remove","title":"pygwt remove","text":"<p>Remove worktree.</p> <p>Usage:</p> <pre><code>pygwt remove [OPTIONS] NAME [ADDITIONAL_ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/#pygwt-shell","title":"pygwt shell","text":"<p>Spawn a new shell within the selected worktree.</p> <p>Detect the current shell, the command is executed in and spawn a new instance within the directory of the worktree defined by [NAME].</p> <p>If the branch, defined by [NAME], does not exist and the create flag is set, a new branch will be created. If [START_POINT] is omitted the current HEAD will be used as a start point.</p> <p>Usage:</p> <pre><code>pygwt shell [OPTIONS] NAME [START_POINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <code>-c</code>, <code>--create</code> boolean Create the worktree if it does not yet exists. <code>False</code> <code>-d</code>, <code>--delete</code> boolean Delete the checkout after exiting the shell. <code>False</code>"},{"location":"cli/#pygwt-switch","title":"pygwt switch","text":"<p>Switch into the work given worktree.</p> <p>Usage:</p> <pre><code>pygwt switch [OPTIONS] NAME [START_POINT]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>-h</code>, <code>--help</code> boolean Show this message and exit. <code>False</code> <code>-c</code>, <code>--create</code> boolean Create the worktree if it does not yet exists. <code>False</code>"}]}